SLL program:
addi x2,x0,2
addi x1,x0,4
sll x3, x2, x1  

    mem[0] = 32'b001000000000000100010011;
    mem[1] = 32'b010000000000000010010011;
    mem[2] = 32'b000100010001000110110011;
------------------------------------------
SLL program:
addi x2,x0,2
addi x1,x0,4
srl x3, x2, x1 

mem[0] = 32'b0100000000000000100010011;
mem[1] = 32'b001000000000000010010011;
mem[2] = 32'b000100010101000110110011;
------------------------------------------
SRA:
addi x2,x0,8
addi x1,x0,2
sra x3, x2, x1 

mem[0] = 32'b0100000000000000100010011;
mem[1] = 32'b001000000000000010010011;
mem[2] = 32'b01000000000100010101000110110011;
-------------------------------------------
ADD:
add x3, x2, x1 //000100010000000110110011

sra x3, x2, x1 //01000000000100010101000110110011
srl x3, x2, x1 //000100010101000110110011

//Shift is not working

beq x4, x3, L1 //001100100000010001100011 where L1 = 6


BEQ program:
mem[0]=32'b000000000000_00000_010_00001_0000011 ; //lw x1, 0(x0)           x1 = 17
mem[1]=32'b000000000100_00000_010_00010_0000011 ; //lw x2, 4(x0)           x2 = 9 
mem[2]=32'b000000001000_00000_010_00011_0000011 ; //lw x3, 8(x0)           x3 =25 
mem[3]=32'b0000000_00010_00001_110_00100_0110011 ; //or x4, x1, x2         x4 = 25
mem[4]=32'b000000000001100100000010001100011;  //beq x4, x3, L1  where L1 = 6
mem[5]=32'b000000000010000011000001010110011; 	//add x5 x3 x4
mem[6]=32'b000000000010000010000001010110011; 	//add x5 x2 x4
output: 34 in x5 
--------------------------------------------------------------------------
BLT program:     
mem[0]=32'b000000000000_00000_010_00001_0000011 ; //lw x1, 0(x0)           x1 = 17
mem[1]=32'b000000000100_00000_010_00010_0000011 ; //lw x2, 4(x0)           x2 = 9 
mem[2]=32'b000000001000_00000_010_00011_0000011 ; //lw x3, 8(x0)           x3 =25 
mem[3]=32'b0000000_00010_00001_110_00100_0110011 ; //or x4, x1, x2         x4 = 25
mem[4]=32'b000000000010000011000001010110011;  //blt x4 x3 5
mem[5]=32'b000000000010000010000001010110011; 	//add x5 x2 x4
mem[6]=32'b000000000010000011000001010110011; 	//add x5 x3 x4
output: 50 in x5
--------------------------------------------------------------------------
mem[0]=32'b0001000100000000000010010011; //addi x1 x0 17
--------------------------------------------------------------------------
XORi program(I-type)
mem[0]=32'b100100000000000010010011;    //addi x1 x0 9
mem[1]=32'b011000001100000100010011;   //xori x2 x1 6
output should be 15 in x2
--------------------------------------------------------------------------
XOR program
mem[0]=32'b100100000000000010010011;    //addi x1 x0 9
mem[1]=32'b011000000000000100010011;   //addi x2 x0 6
mem[3]=32'b001000001100000110110011;   //xor x3 x1 x2
output should be 25 in x3
------------------------------------------------------------------------
AUIPC program:
mem[0] = 32'b10010011; //addi x1 x0 0
mem[1]=32'b11001000000010010111; //auipc x1 200
output should be 819204 in x1
------------------------------------------------------------------------
AUIPC program:
mem[0] = 32'b10010011; //addi x1, x0, 0
mem[1]=32'b11001000000010110111; //LUI x1, 200
output should be 819200 in x1
------------------------------------------------------------------------
JALR program:(DONE)
addi x2, x0, 4
jalr x3, 12(x2)
addi x6, x0, 5 
addi x5, x0, 12
addi x4, x0, 9

mem[0] = 32'b010000000000000100010011;
mem[1] = 32'b0110000010000000111100111;
mem[2] = 32'b010100000000001100010011;
mem[3] = 32'b0110000000000001010010011;
mem[4] = 32'b0100100000000001000010011;

output should be 9 in x4, 0 in x5, 0 in x6, 8 in x3
------------------------------------------------------------------------
JAL program:
addi x2, x0, 4
jal x3, L1
addi x6, x0, 5 
addi x5, x0, 12
L1: addi x4, x0, 9

mem[0] = 32'b010000000000000100010011;
mem[1] = 32'b0110000000000000111101111;
mem[2] = 32'b010100000000001100010011;
mem[3] = 32'b0110000000000001010010011;
mem[4] = 32'b0100100000000001000010011;

output should be 9 in x4, 0 in x5, 8 in x3, 0 in x6, 4 in x2
------------------------------------------------------------------------
JAL, JALR and BEQ program:
addi x1, x0, 3 //x1=3
jal x3, L1 //x3=
addi x4, x0, 5 //skipped
beq x0, x0, L2
L1:jalr x6, 4(x3)
L2:addi x1, x0, 1

mem[0] = 32'b001100000000000010010011;
mem[1] = 32'b0110000000000000111101111;
mem[2] = 32'b010100000000001000010011;
mem[3] = 32'b010001100011;
mem[4] = 32'b010000011000001101100111;
mem[5] = 32'b000100000000001010010011;

output should be 20 in x6, 3 in x1, 8 in x3, 1 in x5
------------------------------------------------------------------------
load instructions 

lbu  x1, 0(x0) //210
lb   x1, 0(x0) //-46
lh   x1,0(x0) //-32302
lhu  x1,0(x0) //33234
lw   x1,0(x0) //4751826

mem[0]= 32'b00000000000000000100000010000011; 
mem[1]= 32'b00000000000000000000000010000011;
mem[2]= 32'b00000000000000000001000010000011;
mem[3]= 32'b00000000000000000101000010000011;
mem[4]= 32'b00000000000000000010000010000011;
-------------------------------------------------------------------------
store instructions
addi x1,x0,200  //200 in x1
addi x2,x0,-256  //-256 in x2
addi x3,x0,962 //962 in x3
sw x1,0(x0)   //200 in mem[0]
sh x2,4(x0)  //-256 in mem[1]
sb x3,8(x0)  //194 in mem[2]


mem[0]=32'b1100100000000000000010010011
mem[1]=32'b11110000000000000000000100010011
mem[2]=32'b00111100001000000000000110010011
mem[3]=32'b000100000010000000100011
mem[4]=32'b001000000001001000100011
mem[5]=32'b001100000000010000100011

----------------------------------
Final General Test:

addi x1,x0,4 #x1=4
addi x2,x0,2 #x2=2
sll x3, x2, x1 #x3=32
sra x4, x3, x2 #x4=8
sub x5, x4, x2 #x5=6
and x6, x4, x1 #x6 = 4
or x7, x3, x1  #x7=36
addi x8, x0, 3 #x8 = 3 #start test JAL and JALR  and BEQ 
jal x9, L1 #x9=36 , imm=12
addi x10, x0, 5 #skipped
beq x0, x0, L2 #
L1:jalr x11, 4(x9) #x11=48 , target pc = 40
L2:addi x12, x0, 1 #x12=1
addi x13, x0, 475 #111011011
sw x13, 12(x0) #mem[3]= 475 //111011011
lb x14, 12(x0) #x14= 11011011 //-37 
lbu x15, 12(x0) #x15=//219
lw x16, 12(x0) #x16= 111011011 //475

mem[0] = 32'b010000000000000010010011;
mem[1] = 32'b001000000000000100010011;
mem[2] = 32'b000100010001000110110011;
mem[3] = 32'b01000000001000011101001000110011;
mem[4] = 32'b01000000001000100000001010110011;
mem[5] = 32'b000100100111001100110011;
mem[6] = 32'b000100011110001110110011;
mem[7] = 32'b0001100000000010000010011;
mem[8] = 32'b0110000000000010011101111;
mem[9] = 32'b010100000000010100010011;
mem[10] = 32'b010001100011;
mem[11] = 32'b010001001000010111100111;
mem[12] = 32'b000100000000011000010011;
mem[13] = 32'b00011101101100000000011010010011;
mem[14] =32'b0110100000010011000100011;
mem[15] = 32'b0110000000000011100000011;
mem[16] = 32'b0110000000100011110000011;
mem[17] = 32'b0110000000010100000000011;
----------------------------------------------------------
EBREAK:
mem[0] = 32'b01000000100110011;
mem[1]  =32'b01110011;


